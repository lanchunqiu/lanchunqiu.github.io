<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>输出正整数N以内的所有质数（素数）</title>
      <link href="/2019/03/06/GetPrimes/"/>
      <url>/2019/03/06/GetPrimes/</url>
      
        <content type="html"><![CDATA[<h3 id="输出N以内的所有质数（素数）"><a href="#输出N以内的所有质数（素数）" class="headerlink" title="输出N以内的所有质数（素数）"></a>输出N以内的所有质数（素数）</h3><p>例如：输入20，输出[2,3,5,7,11,13,17,19]</p><h3 id="方法1：贪心算法"><a href="#方法1：贪心算法" class="headerlink" title="方法1：贪心算法"></a>方法1：贪心算法</h3><p>看到这到题时，立刻就能想到用嵌套循环，对于任意的n对【2，n-1】之间每个数取余，如果余数0，说明能除尽，则不是素数（质数）。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 贪心算法     * @param num     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    n<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            num<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="方法2：算法改进"><a href="#方法2：算法改进" class="headerlink" title="方法2：算法改进"></a>方法2：算法改进</h3><p>其实，贪心算法中右一些多余的判断，比如，偶数肯定不是质数；对于一个正整数n只需要判断【2，n的平方根】之间的有没有整数能被n整除，如果有就不是质数。</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">/**     * 算法优化：每个数n只比较[2 ~ sqrt(n)]之内的奇数     * @param num     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getPrimes2</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> sqrt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> sqrt<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只判断奇数</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只判断奇数</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM原理</title>
      <link href="/2019/03/03/jvm-principle/"/>
      <url>/2019/03/03/jvm-principle/</url>
      
        <content type="html"><![CDATA[<p>对于Java程序员来说，在虚拟机自动内存管理机制的帮助下，不再需要为每一个创建对象操作去写配对的delete/free代码，不容易出现内存泄漏和内存溢出问题，由于虚拟机管理内存这一切看起来很美好。不过，也正是因为Java程序员把内存控制权交给了Java虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将成为一项异常艰辛的工作。后面讲从概念上介绍Java虚拟机内存的各个区域。</p><h2 id="一、运行时数据区域"><a href="#一、运行时数据区域" class="headerlink" title="一、运行时数据区域"></a>一、运行时数据区域</h2><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分成若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而创建和销毁。根据<a href="https://docs.oracle.com/javase/specs/jvms/se7/html/index.html" target="_blank" rel="noopener">《Java虚拟机规范（Java SE 7 版）》</a>的规定，Java虚拟机所管理的内存包括以下几个运行时数据区域，如下图：</p><p><img src="/2019/03/03/jvm-principle/JavaRuntimeDataArea.png" alt></p><p>运行时数据区域包括：方法区、堆、虚拟机栈、本地方法栈、程序计数器；</p><h3 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1.程序计数器"></a>1.程序计数器</h3><p><strong>程序计数器</strong>是一块较小的内存空间，它可以看作是<strong>当前线程</strong>所执行的字节码的行号指示器。字节码指令中的分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</p><p>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（多核处理器的一个核心）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，各个线程之间的计数器互不影响，独立存储，所以程序计数器为“线程私有”的内存。</p><p>此内存区域是唯一一个在Java虚拟机规范只能够没有规定任何OutOfMemoryError情况的区域。</p><h3 id="2-虚拟机栈"><a href="#2-虚拟机栈" class="headerlink" title="2.虚拟机栈"></a>2.虚拟机栈</h3><p><strong>虚拟机栈</strong>也是线程私有的内存区域，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于存储<strong>局部变量表</strong>、<strong>操作数栈</strong>、<strong>动态链接</strong>、<strong>方法出口</strong>等信息。每个方法从调用直至执行完成的过程，就时对应着一个栈帧在虚拟机栈总入栈到出栈的过程。</p><p>局部变量表存放了在编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）和对象引用（reference类型）。局部变量表所需要的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p><p>在Java虚拟机规范中，对这个区域规定了2种异常情况：</p><ul><li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；</li><li>如果虚拟机栈可以动态扩展（当前大部分的虚拟机都可以动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会跑出OutOfMemoryError异常。</li></ul><h3 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3.本地方法栈"></a>3.本地方法栈</h3><p><strong>本地方法栈</strong>与虚拟机栈的作用非常类似，它们之间的区别不过是虚拟机栈是为虚拟机执行Java方法服务，而本地方法栈则为虚拟机使用到的native方法服务。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</p><h3 id="4-堆"><a href="#4-堆" class="headerlink" title="4.堆"></a>4.堆</h3><p><strong>堆</strong>是Java虚拟机所管理的内存中最大的一块。堆是被所以线程所共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例和数组都在这里分配内存。</p><p>堆是垃圾收集器管理的主要区域。</p><p>从内存的回收角度来看，由于现在的收集器基采用了分代收集算法，所以堆还可以化分为：新生代和老年代。新生代可以再分为Eden空间、From Survivor空间、To Survivor空间。</p><p>从内存分配的角度来看，线程共享的堆中可能划分出多个线程私有分配缓冲区（Thread Local Allocation Buffer，TLAB）。</p><p>无论如何划分，都与存放内容无关，无论哪个区域，存储的都是对象实例，进一步划分的目的是为了更好的回收内存，或者更快的分配内存。</p><p>根据Java虚拟机规范的规定，堆可以处在物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。既可以是固定大小的，也可以是扩展的，具体可以通过-Xmx和-Xms控制。如果堆中没有内存完成实例分配，并且也无法扩展时，将会抛出OutOfMemoryError异常。</p><h3 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5.方法区"></a>5.方法区</h3><p><strong>方法区</strong>与堆一样是所有线程共享的内存区域，它用于存储已经被虚拟机加载的<strong>类信息</strong>、<strong>常量</strong>、<strong>静态变量</strong>、<strong>即时编译后的代码</strong>等数据。理论上属于运行时数据区的一部分，为了和堆（Heap）区分，它有一个别名叫做非堆（Non-Heap）。</p><p>这个区域可以选择不进行内存回收，该区域回收的目标主要是针对常量池回收和对类型的卸载。内存不足时会抛出OutOfMemoryError异常。</p><p><strong>运行时常量池</strong>：它是方法区的一部分。Class的版本、字段、方法、接口等，以及编译期生成的各种字面量、符号引用，这部分内容将在类加载后存放到运行时常量池中。</p><h2 id="二、直接内存"><a href="#二、直接内存" class="headerlink" title="二、直接内存"></a>二、直接内存</h2><p><strong>直接内存（Direct Memory）</strong>并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但也会抛出OutOfMemoryError异常。</p><p>在JDK1.4中新加入了NIO（New Input/Output），引入了一种基于通道（Channel）与缓冲区（Buffer）的IO方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因此避免了Java堆和Native堆中来回复制数据。</p><p>直接内存的分配不受Java堆大小的限制，但是会受到本机总内存大小和处理器寻址空间的限制。</p><h2 id="三、对象的内存布局"><a href="#三、对象的内存布局" class="headerlink" title="三、对象的内存布局"></a>三、对象的内存布局</h2><p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：<strong>对象头（Header）</strong>、<strong>实例数据（Instance Data）</strong>、<strong>对齐填充（Padding）</strong>。</p><h3 id="1-对象头（Header）"><a href="#1-对象头（Header）" class="headerlink" title="1.对象头（Header）"></a>1.对象头（Header）</h3><p>对象头包括两部分信息：</p><ul><li><p>第一部分为Mark Word，用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程吃药的锁、偏向线程ID、偏向时间戳等。Mark Word在32位JVM中的长度是32bit，在64位JVM中长度是64bit。例如，在32位的HotSpot虚拟机中，如果对象处于未被锁定的状态下，那么MarkWord的32位空间中的25位用于存储对象哈希码，4位用于存储对象分代年龄，2位用于存储锁标志位，1位固定为0。</p><p><img src="/2019/03/03/jvm-principle/MarkWord.png" alt></p><p>其中<strong>无锁</strong>和<strong>偏向锁</strong>的锁标志位都是01，只是在前面的1bit区分了这是无锁状态还是偏向锁状态。</p><p>JDK1.6对锁进行了优化，以后的版本在处理同步锁时存在锁升级的概念，JVM对于同步锁的处理是从<strong>偏向锁</strong>开始的，随着竞争越来越激烈，处理方式从<strong>偏向锁</strong>升级到<strong>轻量级锁</strong>，最终升级到<strong>重量级锁</strong>。</p><p>JVM一般是这样使用锁和Mark Word的：</p><ul><li><p>（1）当没有被当成锁时，这就是一个普通的对象，Mark Word记录对象的HashCode，锁标志位是01，是否偏向锁那一位是0，表示<strong>无锁</strong>。</p></li><li><p>（2）当对象被当做同步锁并有一个线程A抢到了锁时，锁标志位还是01，但是否偏向锁那一位改成1，前23bit记录抢到锁的线程ID，表示进入<strong>偏向锁</strong>状态。</p></li><li><p>（3）当线程A再次试图来获得锁时，JVM发现同步锁对象的标志位是01，是否偏向锁是1，也就是偏向状态，Mark Word中记录的线程ID就是线程A自己的ID，表示线程A已经获得了这个偏向锁，可以执行同步锁的代码。</p></li><li><p>（4）当另一个线程B试图获得这个锁时，JVM发现同步锁处于偏向状态，但是Mark Word中的线程ID记录的不是B，那么线程B会先用CAS操作试图获得锁，这里的获得锁操作是有可能成功的，因为线程A一般不会自动释放偏向锁。如果抢锁成功，就把Mark Word里的线程ID改为线程B的ID，代表线程B获得了这个偏向锁，可以执行同步锁代码。如果抢锁失败，则继续执行步骤（5）。</p></li><li><p>（5）偏向锁状态抢锁失败，代表当前锁有一定的竞争，偏向锁将升级为<strong>轻量级锁</strong>。JVM会在当前线程的线程栈中开辟一块单独的空间，里面保存指向对象锁Mark Word的指针，同时在对象锁Mark Word中保存指向这片空间的指针。上述两个保存操作都是CAS操作，如果保存成功，代表线程抢到了同步锁，就把Mark Word中的锁标志位改成00，可以执行同步锁代码。如果保存失败，表示抢锁失败，竞争太激烈，继续执行步骤（6）。</p></li><li><p>（6）轻量级锁抢锁失败，JVM会使用自旋锁，自旋锁不是一个锁状态，只是代表不断的重试，尝试抢锁。从JDK1.7开始，自旋锁默认启用，自旋次数由JVM决定。如果抢锁成功则执行同步锁代码，如果失败则继续执行步骤（7）。</p></li><li><p>（7）自旋锁重试之后如果抢锁依然失败，同步锁会升级至<strong>重量级锁</strong>，锁标志位改为10。在这个状态下，未抢到锁的线程都会被阻塞。</p></li></ul></li><li><p>第二部分是类型指针，它是指向<strong>方法区</strong>对象类型数据的指针，如果是数组对象的话，还会有一个额外的部分存储数组长度。</p></li></ul><p>###2.实例数据（Instance Data）</p><p>实例数据是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。</p><h3 id="3-对齐填充（Padding）"><a href="#3-对齐填充（Padding）" class="headerlink" title="3.对齐填充（Padding）"></a>3.对齐填充（Padding）</h3><p>对齐填充并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。</p><h2 id="四、对象的访问定位"><a href="#四、对象的访问定位" class="headerlink" title="四、对象的访问定位"></a>四、对象的访问定位</h2><p>建立对象是为了使用对象，Java程序需要通过栈上的reference数据来操作堆上的具体对象。由于reference类型在Java虚拟机规范中规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位、访问堆中的对象的具体位置。所以对象的访问方式也是取决于虚拟机实现而定的。目前主流的访问方式有<strong>使用句柄</strong>和<strong>直接指针</strong>两种。</p><h3 id="1-句柄方式访问"><a href="#1-句柄方式访问" class="headerlink" title="1.句柄方式访问"></a>1.句柄方式访问</h3><p>如果使用句柄访问的话，那么Java堆中将会划分出一块内存来作为<strong>句柄池</strong>，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。</p><p><img src="/2019/03/03/jvm-principle/ObjectHandlerAccess.png" alt></p><p>使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象时非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要改变。</p><h3 id="2-直接指针式访问"><a href="#2-直接指针式访问" class="headerlink" title="2.直接指针式访问"></a>2.直接指针式访问</h3><p>如果使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的地址信息，而reference存储的直接就是对象地址。</p><p><img src="/2019/03/03/jvm-principle/ObjectDirectPointerAccess.png" alt></p><p>使用直接地址访问方式的最大好处就是速度快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的指向成本。就Hotspot虚拟机而言，它是使用的第二种方式进行访问的。</p><h2 id="五、内存区域控制参数及对应溢出异常"><a href="#五、内存区域控制参数及对应溢出异常" class="headerlink" title="五、内存区域控制参数及对应溢出异常"></a>五、内存区域控制参数及对应溢出异常</h2><p>在Java虚拟机规范的描述中，除了程序计数器外，虚拟机内存的其他几个运行时数据区域都有可能发生OutOfMemoryError异常（以下简称OOM）。</p><p>在开发过程中或程序运行过程中每次遇到OOM异常或StackOverflowError异常或GC异常时，我们需要根据异常信息来快速判断时哪个区域的异常，知道怎样的代码可能会导致这些区域的异常，以及出现这些异常后改怎么处理。下面就来介绍一下每个区域可能抛出的异常类型、发生异常的场景以及内存区域对象的参数。</p><h3 id="1-堆内存"><a href="#1-堆内存" class="headerlink" title="1.堆内存"></a>1.堆内存</h3><p>常用参数：</p><ul><li><p>-Xms：堆最小值</p></li><li><p>-Xmx：堆最大值</p></li><li><p>其他：-XX:+HeapDumpOnOutOfMemoeryError可以让虚拟机在出现内存溢出异常时Dump当前的内存堆转储快照一般事后进行分析。</p></li></ul><p>例：-Xms128M -Xmx=128M</p><p>通常将-Xmx和-Xms设置为一样的大小来减少gc的次数，堆内存不足时抛出OOM异常。</p><p>Java堆内存的OOM异常时实际应用中常见的内存溢出异常情况。当出现Java堆内存溢出时，异常堆栈信息“java.lang.OutOfMemoryError”会跟着进一步提示“Java heap space”。</p><p>要解决着区域的异常，一般的手段是先通过内存映像分析工具（如Eclipse Memory Analyzer）对Dump出来的堆转储快照进行分析，重点是确认内存中的对象是否必要的，也就要先分清楚到底是出现了内存泄漏还是内存溢出。</p><h3 id="2-栈内存（虚拟机栈和本地方法栈）"><a href="#2-栈内存（虚拟机栈和本地方法栈）" class="headerlink" title="2.栈内存（虚拟机栈和本地方法栈）"></a>2.栈内存（虚拟机栈和本地方法栈）</h3><p>常用参数：-Xss，例如：-Xss128K。</p><p>关于虚拟机栈和本地方法栈，在虚拟机规范中描述了两种异常：</p><ul><li><p>如果线程请求的栈深度大于虚拟机所允许最大深度，将抛出StackOverflowError异常；</p></li><li><p>如果虚拟机栈在扩展栈是无法申请足够的内存空间，则抛出OutOfMemoryError异常；</p></li></ul><h3 id="3-方法区内存"><a href="#3-方法区内存" class="headerlink" title="3.方法区内存"></a>3.方法区内存</h3><p>常用参数：</p><ul><li><p>-XX:PermSize方法区内存最小值</p></li><li><p>-XX:MaxPermSize方法区内存最大值</p></li></ul><p>例：-XX:PermSize=200M -XX:MaxPermSize=200M</p><p>异常类型：OutOfMemoryError</p><p>因为方法区用于存放加载的类信息、常量、静态变量、即时编译后的代码等数据，所以产生类过多就可能出方法区异常异常。当前的很多框架，例如Spring、Hibernate，在多类进行增强时，都会使用CGLib字节码技术，增强的类越多，就需要越大的方法区来保证动态生成的Class可以加载入内存。</p><h3 id="4-直接内存"><a href="#4-直接内存" class="headerlink" title="4.直接内存"></a>4.直接内存</h3><p>常用参数：-XX:MaxDirectMemorySize，例如：-XX:MaxDirectMemorySize=100M。如果不指定则与堆的最大值相同。</p><p>异常：OutOfMemoryError</p><h2 id="六、垃圾收集算法"><a href="#六、垃圾收集算法" class="headerlink" title="六、垃圾收集算法"></a>六、垃圾收集算法</h2><h3 id="1-怎么确定对象可被回收"><a href="#1-怎么确定对象可被回收" class="headerlink" title="1.怎么确定对象可被回收"></a>1.怎么确定对象可被回收</h3><p>在堆里面存放Java中几乎所有的对象实例。垃圾收集器在对堆进行回收之前，第一件事情就是要确定这些对象之中哪些还“存活”着，哪些已经“死去”。</p><h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不能在使用的。</p><p>客观地说，引用计数算法的实现很简单，判断效率也很高，在大部分情况下它都是一个不错的算法，也有一些著名的应用案例。但是，至少主流的Java虚拟机里面没有选用引用计数器算法来管理内存，其中主要的原因时它很难解决对象之间循环引用的问题。</p><p>举个简单的例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceCountingGC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span>  Object instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 这个成员属性的唯一意义就是占点内存，以便在GC日志中看情况是否内回收过     */</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ReferenceCountingGC objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ReferenceCountingGC objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objA<span class="token punctuation">.</span>instance <span class="token operator">=</span> objB<span class="token punctuation">;</span>        objB<span class="token punctuation">.</span>instance <span class="token operator">=</span> objA<span class="token punctuation">;</span>        objA <span class="token operator">=</span> null<span class="token punctuation">;</span>        objB <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//假设这行发生GC，objA和objB是否能被回收？</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">testGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在idea设置vm参数，让程序运行后打印GC日志，“-Xms50M -Xmx100M -XX:+PrintGCDetails -Xloggc:./gc.log”</p><p><img src="/2019/03/03/jvm-principle/idea-vm-params.png" alt></p><p>在输出的GC日志中可以看到“6679K-&gt;704K”，意味着虚拟机并没有因为这两个对象互相引用就不回收它们，这也从侧面说明虚拟机并不是通过引用计数算法来判断对象是否存活的。</p><pre><code>0.188: [GC (System.gc()) [PSYoungGen: 6679K-&gt;704K(14848K)] 6679K-&gt;712K(49152K), 0.0010985 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 0.189: [Full GC (System.gc()) [PSYoungGen: 704K-&gt;0K(14848K)] [ParOldGen: 8K-&gt;596K(34304K)] 712K-&gt;596K(49152K), [Metaspace: 3074K-&gt;3074K(1056768K)], 0.0053940 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] Heap PSYoungGen      total 14848K, used 256K [0x00000007bdf00000, 0x00000007bef80000, 0x00000007c0000000)  eden space 12800K, 2% used [0x00000007bdf00000,0x00000007bdf40190,0x00000007beb80000)  from space 2048K, 0% used [0x00000007beb80000,0x00000007beb80000,0x00000007bed80000)  to   space 2048K, 0% used [0x00000007bed80000,0x00000007bed80000,0x00000007bef80000) ParOldGen       total 34304K, used 596K [0x00000007b9c00000, 0x00000007bbd80000, 0x00000007bdf00000)  object space 34304K, 1% used [0x00000007b9c00000,0x00000007b9c953c8,0x00000007bbd80000) Metaspace       used 3086K, capacity 4496K, committed 4864K, reserved 1056768K  class space    used 335K, capacity 388K, committed 512K, reserved 1048576K</code></pre><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>在主流的商用程序语言（Java、C#）的主流实现中，都是通过可达性分析来判定对象是否存活的。可达性分析算法的基本思路就是通过一些列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（用图伦的话来说，就是从GC Roots 到这个对象不可达）时，则证明此对象时不可用的。ReachabilityAnalysis</p><p><img src="/2019/03/03/jvm-principle/ReachabilityAnalysis.png" alt></p><p>在Java语言中，可作为GC Roots的对象包括下面4种：</p><ul><li><p>虚拟机栈（栈帧中的本地变量表）中引用的对象；</p></li><li><p>方法区中类静态属性引用的对象；</p></li><li><p>方法区中常量引用的对象；</p></li><li><p>本地方法栈中（即一般说的Native方法）引用的对象。</p></li></ul><p>在JDK1.2之后，Java对引用的概念进行了扩充，将引用分为<strong>强引用（Strong Reference）</strong>、<strong>软引用（Soft Reference）</strong>、<strong>弱引用（Weak Reference）</strong>、<strong>虚引用（Phantom Reference）</strong>4种，这4种引用强度依次逐渐减弱。</p><ul><li><p><strong>强引用</strong>就是指在程序代码中普遍存在的，类似“Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</p></li><li><p><strong>软引用</strong>是用来描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK1.2之后，提供了SoftReference来实现软引用。</p></li><li><p><strong>弱引用</strong>也是用来描述非必需对象的，但是它的强度比软引用还要弱一些，被弱引用关联的对象只能生存到下一次垃圾收集之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK1.2之后，提供了WeakReference类来实现弱引用。</p></li><li><p><strong>虚引用</strong>也成为幽灵引用或虚幻引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在JDK1.2之后，提供了PhantomReference类来实现虚引用。</p></li></ul><h3 id="2-垃圾收集算法"><a href="#2-垃圾收集算法" class="headerlink" title="2.垃圾收集算法"></a>2.垃圾收集算法</h3><h4 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h4><p>最基础的收集算法是<strong>“标记-清除”（Mark-Sweep）</strong>算法，算法分为“标记”和“清除”两个阶段：标记阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有标记的对象。其他的收集算法都是基于标记清除算法基础上进行改进得到的。</p><p>主要缺点：</p><p>一个是效率问题，标记和清除两个过程的效率都不高；</p><p>另一个是空间问题，标记清除之后会产生大量不连续的内存碎片。</p><p><img src="/2019/03/03/jvm-principle/MarkSweep.png" alt></p><h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p>为了解决效率问题，一种称为<strong>“复制”（Copying）</strong>的收集算法出现了，它将可用的内存容量划分大小相等的两块，每次只使用其中的一块。当着一块的内存用完了，就将还存活着的对象复制到另一块上面，然后再把已经使用过的内存空间一次清理掉。这种算法的代价就是将内存缩小为原理的一半，未免也太高了一点。</p><p><img src="/2019/03/03/jvm-principle/Copying.png" alt></p><p>在商用的虚拟中使用该算法回收新生代，由研究表明，新生代中的对象98%是“朝生夕死”的，并不需要按照1:1的比例来划分内存，而是将内存分为一块较大的<strong>Eden空间</strong>和两块小的<strong>Survivor空间</strong>，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的内存会被“浪费”。</p><p>当然98%的对象可以回收这只是一般场景下的数据，我们没有办法保证每次回收都只有不到10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（这里指老年代）进行分配担保（Handle Promotion）。</p><p>优点：</p><p>比较标记清除算法，避免了回收造成的内存碎片；</p><p>缺点：</p><p>以牺牲空间为代价，复制也有一定的效率和空间成本。</p><h4 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h4><p>前面的讲解的复制算法在对象存活率较高时就需要进行多次的复制操作，效率将会降低，更关键的是如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的的内存中所以对象都100%存活的极端情况，所以在<strong>老年代</strong>一般不直接采用这种算法。</p><p>更加老年代对象存活率高的特点，有人提出了另外一种“标记-整理”（Mark-Compact）算法，标记过程任然与“标记-清除”算法一样，但后面步骤不在是直接对可回收对象进行清理，而是让所以存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><p><img src="/2019/03/03/jvm-principle/MarkCompact.png" alt></p><h4 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>当前商业虚拟机的懒觉收集都采用“分代收集”（Generational Collection）算法，这种算法并没有什么新的思想，只是根据对象存活周期的不同将内存划分为几块。一般把内存划分为新生代和老年代2块，这样就可以根据各个年代的特点采用最合适的收集算法。在新生代中，每次垃圾收集时都发现有大量的对象死去，只有少量存活，那就选用户<strong>复制算法</strong>。而老年代中因为对象存活率高，没有额外的空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。</p><h2 id="七、垃圾收集器"><a href="#七、垃圾收集器" class="headerlink" title="七、垃圾收集器"></a>七、垃圾收集器</h2><p>Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。</p><p><img src="/2019/03/03/jvm-principle/GarbageCollector.png" alt></p><h3 id="1-Serial-收集器"><a href="#1-Serial-收集器" class="headerlink" title="1.Serial 收集器"></a>1.Serial 收集器</h3><p>特点：</p><p>（1）新生代收集器，可以和Serial Old、CMS组合使用；</p><p>（2）采用复制算法；</p><p>（3）使用单线程进行垃圾回收，回收时会导致Stop The World，用户进程停止；</p><p>（4）Client模式新生代收集器；</p><p><img src="/2019/03/03/jvm-principle/Serial.png" alt></p><h3 id="2-ParNew-收集器"><a href="#2-ParNew-收集器" class="headerlink" title="2.ParNew 收集器"></a>2.ParNew 收集器</h3><p>特点：</p><p>（1）新生代收集器，可以和Serial Old、CMS组合使用；</p><p>（2）采用复制算法；</p><p>（3）使用多线程进行垃圾回收，回收时会导致Stop The World，其它策略和Serial一样；</p><p>（4）许多虚拟机Server模式的新生代收集器；</p><p><img src="/2019/03/03/jvm-principle/ParNew.png" alt></p><h3 id="3-Parallel-Scavenge-收集器"><a href="#3-Parallel-Scavenge-收集器" class="headerlink" title="3.Parallel Scavenge 收集器"></a>3.Parallel Scavenge 收集器</h3><p>特点：</p><p>（1）新生代收集器，可以和Serial Old、Parallel组合使用，不能和CMS组合使用；</p><p>（2）采用复制算法；</p><p>（3）使用多线程进行垃圾回收，回收时会导致Stop The World；</p><p>（4）关注吞吐量，吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间）；</p><p><img src="/2019/03/03/jvm-principle/ParallelScavenge.png" alt></p><h3 id="4-Serial-Old-收集器"><a href="#4-Serial-Old-收集器" class="headerlink" title="4.Serial Old 收集器"></a>4.Serial Old 收集器</h3><p>特点：</p><p>（1）老年代收集器，可以和所有的年轻代收集器组合使用，Serial收集器的老年代版本；</p><p>（2）标记-整理算法，会对垃圾回收导致的内存碎片进行整理；</p><p>（3）使用单线程进行垃圾回收，回收时会导致Stop The World，用户进程停止；</p><p><img src="/2019/03/03/jvm-principle/SerialOld.png" alt></p><h3 id="5-Parallel-Old-收集器"><a href="#5-Parallel-Old-收集器" class="headerlink" title="5.Parallel Old 收集器"></a>5.Parallel Old 收集器</h3><p>特点：</p><p>（1）年老代收集器，只能和Parallel Scavenge组合使用，Parallel Scavenge收集器的年老代版本，Stop The World；</p><p>（2）多线程，采用标记-整理算法，会对垃圾回收导致的内存碎片进行整理；</p><p>（3）关注吞吐量的系统可以将Parallel Scavenge + Parallel Old组合使用；</p><p><img src="/2019/03/03/jvm-principle/ParallelOld.png" alt></p><h3 id="6-CMS-收集器"><a href="#6-CMS-收集器" class="headerlink" title="6.CMS 收集器"></a>6.CMS 收集器</h3><p>特点：</p><p>（1）年老代收集器，可以和Serial、ParNew组合使用；</p><p>（2）采用标记-清除算法，可以通过设置参数在垃圾回收时进行内存碎片的整理；</p><p>（3）CMS是并发算法，表示垃圾回收和用户进行同时进行，但是不是所有阶段都同时进行，在初始标记、重新标记阶段还是需要Stop the World；</p><p>（4）CMS垃圾回收分这四个阶段，三次标记一次回收：</p><ul><li><p><strong>初始标记</strong>，Stop the World，标记一下GC Roots能直接关联到的对象，速度快；</p></li><li><p><strong>并发标记</strong>，GC Roots Tracing，时间长，不停止用户进程；</p></li><li><p><strong>重新标记</strong>，Stop the World，修正并发标记期间因用户程序继续运行导致标记变动的那一部分对象的标记记录，时间长，但远比并发标记时间短；</p></li><li><p><strong>并发清除</strong>，清除的同时用户进程会导致新的垃圾，时间长；</p></li></ul><p>5、适合于对响应时间要求高的系统，以最短回收停顿时间为目标；</p><p>缺点：</p><ul><li><p>对CPU资源非常敏感，并发且维护用户进程的代价；</p></li><li><p>无法处理浮动垃圾，清除时产生新垃圾；</p></li><li><p>由于使用标记清除，故有空间碎片；</p></li></ul><p><img src="/2019/03/03/jvm-principle/CMS.png" alt></p><h3 id="7-G1-收集器"><a href="#7-G1-收集器" class="headerlink" title="7.G1 收集器"></a>7.G1 收集器</h3><p>特点：</p><p>（1）并行并发，使用多个CPU缩短STW的时间；</p><p>（2）分代收集，不需要其他收集器配合也能独立管理堆；</p><p>（3）空间整合，整体基于标记整理算法，局部两个Region基于复制；</p><p>（4）可预测停顿，可以指定时间段M内GC过程时间不超过N；</p><p>（5）较低停顿，停顿时间更加可控可预测；</p><p>特殊点：</p><ul><li><p>新生代和老年代不再物理隔离，都是一部分Region的集合，将堆分为大小相等的Region；</p></li><li><p>G1跟踪各个Region垃圾的价值大小以及回收需要时间维护一个Region优先列表，每次先回收价值最大的Region，这是G1-Garbage First名字的由来；</p></li></ul><p>G1运作分四个阶段，三次标记一次回收：初始标记，并发标记，最终标记，筛选回收；</p><p><img src="/2019/03/03/jvm-principle/G1.png" alt></p><h3 id="垃圾收集器参数总结"><a href="#垃圾收集器参数总结" class="headerlink" title="垃圾收集器参数总结"></a>垃圾收集器参数总结</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-XX:+UseSerialGC</td><td>虚拟机运行在Client模式下的默认值，添加此配置后，使用Serial+Serial Old收集器组合进行内存回收。</td></tr><tr><td>-XX:+UseParNewGC</td><td>添加此配置后，使用ParNew+SerialOld收集器组合进行内存回收。</td></tr><tr><td>-XX:+UseConcMarkSweepGC</td><td>添加此配置后，使用ParNew+CMS+SerialOld收集器组合进行内存回收。Serial Old手机器作为CMS收集器Concurrent Mode Failure失败后的备用手机器。</td></tr><tr><td>-XX:+UseParallelGC</td><td>虚拟机运行在Sever模式下的默认值，添加此配置后，使用Parallel  Scavenge  + Serial Old（PS MarkSweep）收集器组合进行内存回收</td></tr><tr><td>-XX:+UseParallelOldGC</td><td>添加此配置后，使用Parallel Scavenge + Parallel Old收集器进行内存回收。</td></tr><tr><td>-XX:SurvivorRatio</td><td>新生代中Eden区域与Survivor区域的容量比值，默认为8，代表Eden:Survivor = 8:1</td></tr><tr><td>-XX:PretenureSizeThreshold</td><td>直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配</td></tr><tr><td>-XX:MaxTenuringThreshold</td><td>晋升到老年代的对象年龄。每个对象在坚持过一次MinorGC之后，年龄就增加1，当超过这个参数值是就进入老年代</td></tr><tr><td>-XX:UseAdaptiveSizePolicy</td><td>动态调整Java堆中各个区域的大小以及进入老年代的年龄</td></tr><tr><td>-XX:HandlePromotionFailure</td><td>是否允许分配担保失败，即老年代的剩余空间不足以应对新生代的整个Eden和Survivor区的所有对象都存活的极端情况</td></tr><tr><td>-XX:ParalelGCThreads</td><td>设置并行GC时进行内存回收的线程数</td></tr><tr><td>-XX:GCTimeRatio</td><td>GC时间占总时间的比率，默认值为99，即允许1%的GC时间。仅在使用Parallel Scavenge收集器时生效</td></tr><tr><td>-XX:MaxGCPauseMillis</td><td>设置GC的最大停顿时间。仅在使用Parallel Scavenge收集器时生效</td></tr><tr><td>-XX:CMSInitiatingOccupancyFraction</td><td>设置CMS收集器在老年代空间被使用多少后触发垃圾收集。默认值为68%，仅在使用CMS收集器时生效</td></tr><tr><td>-XX:UseCMSCompacatAtFullCollection</td><td>实质CMS收集器在完成垃圾收集后是否要进行一次内存碎片整理。仅在使用CMS收集器时生效</td></tr><tr><td>-XX:CMSFullGCsBeforeCompaction</td><td>设置CMS收集器在进行若干次垃圾收集后再启动一次内存碎片整理。仅在使用CMS收集器时生效</td></tr></tbody></table><p>其他参数：</p><p>-verbose:gc或者-XX:+PrintGC，获取gc信息</p><p>-XX:+PrintGCDetails，获取更加纤细的gc信息</p><p>-XX:+PrintGCTimeStamps， 获取GC的频率和间隔</p><p>-XX:+PrintHeapAtGC，获取堆的使用情况</p><p>-XXloggc:D:\gc.log，指定GC日志的保存路径</p><h3 id="调优策略"><a href="#调优策略" class="headerlink" title="调优策略"></a>调优策略</h3><ul><li><strong>对象优先在新生代Eden区域分配</strong>：由于FullGC/MajorGC（发生在老年代），成本远比MinorGC（发生在新生代）要大的多，所以给应用分配一个合理的新生代空，尽量将对象优先分配到新生代，减少Full GC的频率。</li><li><strong>大对象直接进入老年代</strong>：将大对象（例如长字符串以及数组）直接分配到老年代，保持新生代对象的结构的完整行，以提高GC效率。可以通过-XX:PretenureSizeThreshold参数设置对象进入老年代的阀值。</li><li><strong>长期存活的对象直接进入老年代</strong>：对象晋升老年代的年龄阀值，可以通过参数-XX:MaxTenuringThreshold来设置。</li><li><strong>稳定的堆大小</strong>：稳定的堆大小时对垃圾回收有利的，把-Xms和-Xmx的大小设置一致。</li><li><strong>更加情况选择合适的收集器</strong>：吞吐量优先，尽可能减少系统执行垃圾回收的总时间，故采用并行收集器；低停顿：使用CMS收集器，同时减少Full GC的次数。</li></ul><h2 id="八、监控工具"><a href="#八、监控工具" class="headerlink" title="八、监控工具"></a>八、监控工具</h2><h3 id="1-JDK命令行工具"><a href="#1-JDK命令行工具" class="headerlink" title="1.JDK命令行工具"></a>1.JDK命令行工具</h3><p>Sun JDK 监控与故障处理工具</p><table><thead><tr><th>名称</th><th>主要作用</th></tr></thead><tbody><tr><td>jps</td><td>JVM Process Status Tool，显示指定系统内所有的虚拟机进程</td></tr><tr><td>jstat</td><td>JVM Statistics Monitoring Tool，用于收集虚拟机各方面的运行数据</td></tr><tr><td>jinfo</td><td>Configuration Info for Java，显示虚拟机配置信息</td></tr><tr><td>jmap</td><td>Memory Map for Java，生成虚拟机的内存转储快照（heapdump文件）</td></tr><tr><td>jhat</td><td>JVM Heap Dump Browser，用于分析heap dump文件，它会生成一个http服务器，让用户可以在浏览器上查看分析结果</td></tr><tr><td>jstack</td><td>Stack Trace for Java，显示虚拟机线程栈快照</td></tr></tbody></table><h4 id="（1）jps"><a href="#（1）jps" class="headerlink" title="（1）jps"></a>（1）jps</h4><p>JDK的很多小工具的名字都是参考了UNIX命令的命名方式，<strong>jps（JVM Process Status Tool）</strong>是其中的典型。它的功能和ps命令类似，可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在的类）名称以及这些进程的唯一ID（Local Virtual Machine Identifier，LVMID）。</p><p><strong>命令格式：jps [options] [hostid]</strong></p><p><strong>jps工具主要选项</strong></p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-q</td><td>只输出LVMID，省略主类的名称</td></tr><tr><td>-m</td><td>输出虚拟机进程启动时传递给主类main()方法的参数</td></tr><tr><td>-l</td><td>输出主类的全名，如果进程执行的是Jar包，输出Jar路径</td></tr><tr><td>-v</td><td>输出虚拟机进程启动时JVM参数</td></tr></tbody></table><h4 id="（2）jstat"><a href="#（2）jstat" class="headerlink" title="（2）jstat"></a>（2）jstat</h4><p>jstat（JVM Statistics Monitoring Tool）是用于监控虚拟机各种运行状态信息的命令行工具。它可以显示本地或原创虚拟机中的类装载、内存、垃圾收集、JIT编译等运行数据，在没有GUI图形界面的服务器上，它是首选的一款监控工具。</p><p>命令格式：jstat [ option  vmid  [interval  [s|ms]  [count]] ]</p><p>命令格式解释：jstat 监控内容 线程号 时间间隔 次数</p><p>例如：jstat -gc 2045 1 20，每1秒查询一次进程2045的垃圾收集状况，一共执行20次。</p><p>jstat工具主要选项</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-class</td><td>监视类装载、卸载数量以及类的装载总空间和耗费时间</td></tr><tr><td>-gc</td><td>监视Java堆状况，包括Eden区、两个Survivor区、老年代、永久代等的容量、已用空间、GC时间和机等信息</td></tr><tr><td>-gccapacity</td><td>监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用到的最大和最小空间</td></tr><tr><td>-gcutil</td><td>监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比</td></tr><tr><td>-gccause</td><td>与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因</td></tr><tr><td>-gcnew</td><td>监控新生代GC状况</td></tr><tr><td>-gcnewcapacity</td><td>监视内容与-gcnew基本相同，输出主要关注使用到的最大和最小空间</td></tr><tr><td>-gcold</td><td>监控老年代GC状况</td></tr><tr><td>-gcoldcapacity</td><td>监视内容与-gcold基本相同，输出主要关注使用到的最大和最小空间</td></tr><tr><td>-gcpermcapacity</td><td>输出永久代使用的最大和最小空间</td></tr><tr><td>-compiler</td><td>输出JIT编译器编译过的方法、耗时信息</td></tr><tr><td>-printcompilation</td><td>输出已经被JIT编译的方法</td></tr></tbody></table><h4 id="（3）jinfo"><a href="#（3）jinfo" class="headerlink" title="（3）jinfo"></a>（3）jinfo</h4><p>jinfo（Configuration Info for Java）的作用是实时地查看和调整虚拟机各项参数信息。使用jinfo -v 可以查看虚拟机启动时显式指定的参数列表，但是如果想知道未被显式指定的参数的系统默认值，可以使用”jinfo -flag 参数名 线程ID”  进行查询。</p><p>命令格式：</p><p>jinfo [ option ] pid</p><p>例如：jinfo -flag CMSInitiatingOccupancyFraction 9668，输出 -XX:CMSInitiatingOccupancyFraction=-1</p><h4 id="（4）jmap"><a href="#（4）jmap" class="headerlink" title="（4）jmap"></a>（4）jmap</h4><p>jmap（Memory Map for Java）命令用于生成转储快照（heapdump）。如果不使用jmap命令，要想获取Java堆转储快照，还有一些比较“暴力”的方式，譬如：</p><ul><li><p>通过JVM启动时加入启动参数-XX:HeapDumpOutOfMemoryError参数，可以让JVM在出现内存溢出异常时自动生成dump文件；</p></li><li><p>也可以通过-XX:HeapDumpOnCtrlBreak参数，则在运行时可以使用ctrl + break键让虚拟机 生成dump文件；</p></li><li><p>又或者在Linux系统下通过Kill -3命令发送进程退出信号“吓唬”一下虚拟机也能获取dump文件。    </p></li></ul><p>jmap作用不仅仅是为了获取dump文件，还可以用于查询finalize执行队列、Java堆和永久代的详细信息，如空间使用率、当前使用的是哪种垃圾收集器。</p><p>命令格式：</p><p>jmap [ option ] vmid</p><p>例如：jmap -dump:format=b,file=eclipse.dum 1234</p><p>jmap工具主要选项</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-dump</td><td>生成Java堆转储快照，格式为：-dump:[live, ]format=b, file=<filename>,其中live子参数说明是否只dump出存活的对象</filename></td></tr><tr><td>-finalizerinfo</td><td>显示在F-Queue中等待的Finalizer线程执行finalize方法的对象（只在Linux/Solaris平台下有效）</td></tr><tr><td>-heap</td><td>显示Java堆详细信息，乳沟使用哪种回收器、参数配置、分代详情等（只在Linux/solaris平台下有效）</td></tr><tr><td>-histo</td><td>显示堆栈中的对象的统计信息，包含类、实例数量和合计容量</td></tr><tr><td>-permstat</td><td>以ClassLoader为统计口径显示永久代内存状态（只在Linux/Solaris平台下有效）</td></tr><tr><td>-F</td><td>当虚拟机进程对-dump选项没有响应时，可以用这个选项强制生成dump快照（只在Linux/Solaris平台下有效）</td></tr></tbody></table><h4 id="（5）jstack"><a href="#（5）jstack" class="headerlink" title="（5）jstack"></a>（5）jstack</h4><p>jstack（Stack Trace for Java）命令用于身材虚拟机当前时间的线程快照（一般称为threaddump或者javacore文件）。线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待都是导致线程长时间停顿的常见原因。通过jstack我们就可以知道哪些进程在后台做些什么，在等待什么资源。</p><p>命令格式：</p><p>jstack [ option ] vmid</p><p>jstack工具主要选项</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-F</td><td>当正常输出的请求不被响应时，强制输出线程堆栈</td></tr><tr><td>-l</td><td>除堆栈外，显示关于锁的附加信息</td></tr><tr><td>-m</td><td>显示native方法的堆栈信息</td></tr></tbody></table><h4 id="（6）jhat"><a href="#（6）jhat" class="headerlink" title="（6）jhat"></a>（6）jhat</h4><p>Sun JDK提供jhat(JVM Heap Analysis Tool)命令与jmap搭配使用，来分析jmap生成的堆栈转储快照。jhat内置了一个微型的HTTP/HTML服务器，生成dump文件的分析结果后，可以在浏览器中查看。</p><h3 id="2-JDK可视化工具"><a href="#2-JDK可视化工具" class="headerlink" title="2.JDK可视化工具"></a>2.JDK可视化工具</h3><h4 id="（1）jconsole"><a href="#（1）jconsole" class="headerlink" title="（1）jconsole"></a>（1）jconsole</h4><h4 id="（2）jvisualvm"><a href="#（2）jvisualvm" class="headerlink" title="（2）jvisualvm"></a>（2）jvisualvm</h4><p><em>文章内容主要摘自《深入理解Java虚拟机-JVM高级特性与最佳实践》</em></p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳跃游戏</title>
      <link href="/2019/03/02/JumpGame/"/>
      <url>/2019/03/02/JumpGame/</url>
      
        <content type="html"><![CDATA[<p>给定一个非负整数数组，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。判断你是否能够到达最后一个位置。<a href="https://leetcode-cn.com/problems/jump-game/" target="_blank" rel="noopener">LeetCode</a></p><p>示例1</p><pre class=" language-txt"><code class="language-txt">输入: [2,3,1,1,4]输出: true解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。</code></pre><p>示例2</p><pre class=" language-txt"><code class="language-txt">输入: [3,2,1,0,4]输出: false解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。</code></pre><p>暴力解法</p><p>处理思路：令reach=0,然后遍历数组元素比较a[i]+i与reach的大小，如果比reach值大就和reach的值交换，否则reach不变，最后如果reach大于等于数组的长度，返回true，否则返回false。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> reach <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> reach<span class="token punctuation">)</span><span class="token punctuation">{</span>            reach <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>reach<span class="token punctuation">,</span> i <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>reach <span class="token operator">>=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2019/03/02/DesignPattern/"/>
      <url>/2019/03/02/DesignPattern/</url>
      
        <content type="html"><![CDATA[<p>电商、社交网络、移动互联网……这一个个名称成为近几年来互联网发展的代名词，而在背后推动者中高数发展的就是技术。敏捷开发是互联网企业进行产品开发时常用的一种模式，一个产品从制定需求到上线甚至在一周之内就要王朝，毕竟快竞争对手一步才能抓住更多的用户。在这种情况下，一些久经考验的架构模式被广泛的使用起来，当确定一个产品的架构方案时，”设计模式“一词被越来越多的提出来，甚至一些公司既定的框架就是某一个或几个设计模式的体现。</p><p>设计模式（Design Pattern）是一套面向对象的代码设计经验的总结，是在编程领域被反复使用、被多人知晓、而且巾帼分类整理的代码设计方法。最经典的设计模式是由GOF（“四人帮”）在1995年提出的23种设计模式。设计模式有23种单不仅仅限于23种，<a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="noopener">维基百科</a>中对软件的各种设计模式有很详细的介绍。</p><h2 id="设计模式六大原则"><a href="#设计模式六大原则" class="headerlink" title="设计模式六大原则"></a>设计模式六大原则</h2><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>单一职责原则也被称作接口隔离原则，其定义：对于一个类，应该只有一个引起它变化的原因。</p><p>单一职责的本质是使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。</p><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p>里氏代换原则的定义：子类必须能够替换掉它们的父类型。</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>开闭原则的定义 ：程序的实体对象（模块、类、函数）应该可以进行扩展，但不应该可以修改。</p><p>开闭原则有两个特征：</p><ul><li><p>对于扩展是开放的；</p></li><li><p>对于修改是封闭的；</p></li></ul><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p>依赖倒转原则的定义：程序的高层模块不应该依赖于底层模块，但两者都应该依赖于抽象；抽象不应该依赖于具体细节，而细节应该依赖于抽象。通俗的讲就是面向对象应该针对接口编程，而不是针对实现编程。</p><p>依赖倒转原则的本质是通过抽象（接口或抽象类）使各个类或模块的实现彼此独立，互不影响，从而实现模块间的松耦合。</p><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>合成复用原则的定义：尽量不使用继承，而尽量使用合成/聚合。</p><p>合成于聚和都是类之间特殊的关联关系。聚合表示比较“弱”的拥有关系，具体体现是甲对象中可以包含乙对象，但乙对象不不是甲对象的一部分；合成则是一种比较“强”的拥有关系，体现的是严格的整体与部分之间的关系，并且整体与部分拥有相同的生命周期。比如鱼和鱼群是聚合关系，手臂和人体之间是部分与整体的合成关系。</p><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>迪米特法则也被称作最少知道原则，就是说一个对象应当尽可能少地了解其他对象——不和陌生人说话。</p><p>迪米特法则的定义：如果两个类之间不必直接通信，则这两个类不应该发生直接的相互作用。如果其中的一个类需要调用另一个类的某个方法，可以通过第三者来转发这个调用。</p><h2 id="23种经典设计模式"><a href="#23种经典设计模式" class="headerlink" title="23种经典设计模式"></a>23种经典设计模式</h2><h3 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h3><p>根据各种设计模式的特点，可以将设计模式简单分为三类：创建型模式、结构型模式、行为模式。</p><ul><li>创建型模式，有5种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式；</li><li>结构型模式，有7种：桥接模式、适配器模式、装饰模式、组合模式、享元模式、外观模式、代理模式；</li><li>行为模式，有11种：模版方法模式、策略模式、状态模式、观察者模式、备忘录模式、中介者模式、命令模式、访问者模式、责任链模式、迭代器模式、解释器模式；</li></ul><h3 id="一、创建型模式"><a href="#一、创建型模式" class="headerlink" title="一、创建型模式"></a>一、创建型模式</h3><h4 id="1-工厂方法模式"><a href="#1-工厂方法模式" class="headerlink" title="1.工厂方法模式"></a>1.工厂方法模式</h4><p>工厂方法模式的定义：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法是一个类的实例化延迟到其子类。</p><p>工厂方法模式由抽象工厂、具体工厂、抽象产品和具体产品等4个要素构成。</p><p>工厂方法模式的主要角色如下：</p><ol><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品。</li><li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li></ol><p>结构图：</p><p><img src="/2019/03/02/DesignPattern/FactoryMethodPattern.png" alt></p><p>示例（电视工厂生产电视）：</p><p>创建电视接口类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TV</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建电视的实现类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HairTV</span> <span class="token keyword">implements</span> <span class="token class-name">TV</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"海尔电视播放..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCLTV</span> <span class="token keyword">implements</span> <span class="token class-name">TV</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TCL电视播放..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMiTV</span> <span class="token keyword">implements</span> <span class="token class-name">TV</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米电视播放..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建工厂接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TVFactory</span> <span class="token punctuation">{</span>    TV <span class="token function">produceTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建工厂的实现类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HairTVFactory</span> <span class="token keyword">implements</span> <span class="token class-name">TVFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> TV <span class="token function">produceTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"海尔电视工厂 生产 海尔电视"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HairTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCLTVFactory</span> <span class="token keyword">implements</span> <span class="token class-name">TVFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> TV <span class="token function">produceTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TCL电视工厂 生产 TCL电视"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TCLTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMiTVFactory</span> <span class="token keyword">implements</span> <span class="token class-name">TVFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> TV <span class="token function">produceTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米电视工厂 生产 小米电视"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMiTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TV haierTV <span class="token operator">=</span>  null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义tv对象</span>        TVFactory hairTVFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HairTVFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义工厂</span>        haierTV <span class="token operator">=</span> hairTVFactory<span class="token punctuation">.</span><span class="token function">produceTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建电视对象</span>        haierTV<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 播放电视</span>        TV tclTV <span class="token operator">=</span>  null<span class="token punctuation">;</span>        TVFactory tclTVFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TCLTVFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tclTV <span class="token operator">=</span> tclTVFactory<span class="token punctuation">.</span><span class="token function">produceTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tclTV<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TV xiaomiTV <span class="token operator">=</span>  null<span class="token punctuation">;</span>        TVFactory xiaomiTVFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMiTVFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaomiTV <span class="token operator">=</span> xiaomiTVFactory<span class="token punctuation">.</span><span class="token function">produceTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaomiTV<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：海尔电视工厂 生产 海尔电视海尔电视播放<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>TCL电视工厂 生产 TCL电视TCL电视播放<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>小米电视工厂 生产 小米电视小米电视播放<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>工厂方法模式总结</p><p>优点有：</p><ul><li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</li><li>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</li></ul><p>缺点是：每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</p><p>适用性：</p><ul><li><p>当客户端类不知道它所创建的对象的具体类时，例如需要创建一个电视，但是并不知道创建的是哪种电视；</p></li><li><p>当一个类希望有它的子类来来确定它所创建的对象时；</p></li><li><p>当类间创建对象的职责委托给多个子类中的某一个，并且希望将哪一个子类是代理者这一信息局部化时。</p></li></ul><h4 id="2-抽象工厂模式"><a href="#2-抽象工厂模式" class="headerlink" title="2.抽象工厂模式"></a>2.抽象工厂模式</h4><p>抽象工厂模式的定义：提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。</p><p>抽象工厂模式是工厂方法模式的升级版，工厂方法模式只生产一个系列的产品，而抽象工厂模式可生产多个系列的产品，抽象工厂模式为产品系列提供了一个好的解决方案。抽象工厂模式和工厂方法模式相同也是由抽象工厂、具体工厂、抽象产品和具体产品等4个要素构成。</p><p>工厂方法模式的主要角色如下：</p><ol><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品。</li><li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li></ol><p>结构图：</p><p><img src="/2019/03/02/DesignPattern/AbstractFactoryPattern.png" alt></p><p>示例：</p><p>创建1个抽象工厂接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> AbstractProductA <span class="token function">produceProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> AbstractProductB <span class="token function">produceProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建2个抽象产品接口</p><pre class=" language-Java"><code class="language-Java">public abstract class AbstractProductA {    //每个产品共有的方法    public void shareMethod(){          System.out.println("A产品的共有方法");    }    //每个产品相同方法，不同实现    public abstract void doSomething(); }</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractProductB</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//每个产品共有的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shareMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B产品的共有方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//每个产品相同方法，不同实现</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>抽象工厂AbstractFactory的两个实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AbstractProductA <span class="token function">produceProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【1级产品工厂】：生产1级产品A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AbstractProductB <span class="token function">produceProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【1级产品工厂】：生产1级产品B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory2</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFactory</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AbstractProductA <span class="token function">produceProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【2级产品工厂】：生产2级产品A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AbstractProductB <span class="token function">produceProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"【2级产品工厂】：生产2级产品B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>抽象产品AbstractProductA的实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductA1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProductA</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1级产品A的实现方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductA2</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProductA</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2级产品A的实现方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>抽象产品AbstractProductB的实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductB1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProductB</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1级产品B的实现方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductB2</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProductB</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2级产品B的实现方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义出两个工厂</span>        AbstractFactory factory1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         AbstractFactory factory2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//产生A1对象</span>        AbstractProductA a1 <span class="token operator">=</span>  factory1<span class="token punctuation">.</span><span class="token function">produceProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//产生A2对象</span>        AbstractProductA a2 <span class="token operator">=</span> factory2<span class="token punctuation">.</span><span class="token function">produceProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//产生B1对象</span>        AbstractProductB b1 <span class="token operator">=</span> factory1<span class="token punctuation">.</span><span class="token function">produceProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//产生B2对象</span>        AbstractProductB b2 <span class="token operator">=</span> factory2<span class="token punctuation">.</span><span class="token function">produceProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span><span class="token function">shareMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">shareMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a2<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b1<span class="token punctuation">.</span><span class="token function">shareMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b1<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b2<span class="token punctuation">.</span><span class="token function">shareMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b2<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：【<span class="token number">1</span>级产品工厂】：生产<span class="token number">1</span>级产品A【<span class="token number">2</span>级产品工厂】：生产<span class="token number">2</span>级产品A【<span class="token number">1</span>级产品工厂】：生产<span class="token number">1</span>级产品B【<span class="token number">2</span>级产品工厂】：生产<span class="token number">2</span>级产品BA产品的共有方法<span class="token number">1</span>级产品A的实现方法A产品的共有方法<span class="token number">2</span>级产品A的实现方法B产品的共有方法<span class="token number">1</span>级产品B的实现方法B产品的共有方法<span class="token number">2</span>级产品B的实现方法</code></pre><p>抽象工厂模式总结</p><p>主要优点如下：</p><ul><li>分离了具体的类，工厂封装了创建产品对象的责任和过程，将客户端和类的实现分类。客户端通过抽象接口操纵实例。</li><li>易于交换产品系列，一个具体的工厂类在一个应用中仅在初始化时出现一次，改变一个具体工厂变得容易。</li><li>有利于产品的一致性，一个系列中的产品对象被设计在一起工作时，一个应用一次只能使用同一系列中的对象。</li></ul><p>其缺点是：难以支持新种类的产品，抽象工厂已经确定了可以被创建的产品集合。当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</p><h4 id="3-单例模式"><a href="#3-单例模式" class="headerlink" title="3.单例模式"></a>3.单例模式</h4><p>单例模式的定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p>在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。</p><p>单例模式有 3 个特点：</p><ul><li><p>单例类只有一个实例对象；</p></li><li><p>该单例对象必须由单例类自行创建；</p></li><li><p>单例类对外提供一个访问该单例的全局访问点；</p></li></ul><p>结构图：</p><p><img src="/2019/03/02/DesignPattern/SingletonPattern.png" alt></p><p>示例，创建单例的几种方式：</p><ul><li><p>简单的懒汉单例模式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazySingleton singleton <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方便线程测试，休眠一定时间</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是最简单的创建单例的方式，这种方式在并发的情况下存在线程安全问题，因为<code>singleton = new LazySingleton();</code>并非原子操纵。</p><p>接着，验证线程安全性：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingletonTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        LazySingletonTest<span class="token punctuation">[</span><span class="token punctuation">]</span> mts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingletonTest</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mts<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              mts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingletonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> mts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              mts<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LazySingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span>输出结果：<span class="token number">815626842</span><span class="token number">1798433653</span><span class="token number">1865535330</span><span class="token number">880021412</span><span class="token number">218506352</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>结果很明显，实例的hashcode值不同，故是不同的对象。</p></li><li><p>线程安全的懒汉单例模式</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazySingleton2 lazySingleton2 <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">LazySingleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> LazySingleton2 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> lazySingleton2 <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方便线程测试，休眠一定时间</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lazySingleton2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lazySingleton2 <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>虽然方法getInstance()通过synchronized加同步控制，能保证线程安全，但是在高并发是会出现严重的性问 题，因为每次执行方法getInstance()都需要先获取锁很消耗系统资源，只需要在第一次创建实例时加锁。为了解决上面的问题，在JDK1.5以后可以使用双校验锁单例模式，既能保持线程安全又兼顾的性能。</p><p>接着，验证线程安全性：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton2Test</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        LazySingleton2Test<span class="token punctuation">[</span><span class="token punctuation">]</span> mts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton2Test</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mts<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              mts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton2Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> mts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              mts<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LazySingleton2<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span>输出结果：<span class="token number">42265496</span><span class="token number">42265496</span><span class="token number">42265496</span><span class="token number">42265496</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li></ul><p>​      很明显是线程安全的。</p><ul><li><p>双校验锁单例模式（DCL）</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DuplicationCheckSingleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//volatile屏蔽指令重排的语义在JDK1.5中才被修复</span>    <span class="token comment" spellcheck="true">//在此前的JDK中即使变量被声明为volatile也不能完全避免指令重排所导致的问题，这也是在JDK1.5之前的Java中无法安全的使用DCL来实现单例的原因！！</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> DuplicationCheckSingleton singleton <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">DuplicationCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DuplicationCheckSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//1</span>            <span class="token comment" spellcheck="true">//线程测试，休眠一定时间</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DuplicationCheckSingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//2</span>                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DuplicationCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>说明：标记1处的判断是为了防止不必要的重复创建对象和加锁；在极端的情况，有多个线程同时通过了1的判断，但是当他们执行到<code>synchronized (DuplicationCheckSingleton.class)</code>时就需要先获得锁，才能执行后面的代码，如果线程没有拿到锁就会被阻塞直到其他线程把锁释放，执行到标记2处发现对象已经存在，直接返回已经存在的对象。</p><p>接着，验证线程安全性：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DuplicationCheckSingletonTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        DuplicationCheckSingletonTest<span class="token punctuation">[</span><span class="token punctuation">]</span> mts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DuplicationCheckSingletonTest</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mts<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            mts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DuplicationCheckSingletonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> mts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mts<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>DuplicationCheckSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：<span class="token number">1710248273</span><span class="token number">1710248273</span><span class="token number">1710248273</span><span class="token number">1710248273</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>很明显也是线程安全的，具体和前一周方式的性能差异，可以自己进行验证。</p></li><li><p>静态内部类单例模式</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFinalInnerClassSingleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态内部类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> StaticFinalInnerClassSingleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticFinalInnerClassSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">StaticFinalInnerClassSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> StaticFinalInnerClassSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>静态内部类单例模式也是线程安全的，因为在类<code>StaticFinalInnerClassSingleton</code>加载时已经完成了静态内部类<code>SingletonHolder</code>的初始化，并且只初始化一次，故是线程安全的。如下的验证：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFinalInnerClassSingletonTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        StaticFinalInnerClassSingletonTest<span class="token punctuation">[</span><span class="token punctuation">]</span> mts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticFinalInnerClassSingletonTest</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mts<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              mts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticFinalInnerClassSingletonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> mts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              mts<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>StaticFinalInnerClassSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span>输出结果：<span class="token number">2075741586</span><span class="token number">2075741586</span><span class="token number">2075741586</span><span class="token number">2075741586</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></li></ul><h4 id="4-建造者模式"><a href="#4-建造者模式" class="headerlink" title="4.建造者模式"></a>4.建造者模式</h4><p>建造者模式的定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以穿就不同的表示。</p><p>建造者模式将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。</p><p>建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成。</p><p>建造者（Builder）模式的主要角色如下：</p><ul><li><p>产品角色（Product）：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个滅部件。</p></li><li><p>抽象建造者（Builder）：它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法 getResult()。</p></li><li><p>具体建造者(Concrete Builder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。</p></li><li><p>指挥者（Director）：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。</p></li></ul><p>结构图：</p><p><img src="/2019/03/02/DesignPattern/BuilderPattern.png" alt></p><p>示例</p><p>产品Product</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> parts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPart</span><span class="token punctuation">(</span>String part<span class="token punctuation">)</span><span class="token punctuation">{</span>        parts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Product:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String part <span class="token operator">=</span> parts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>抽象建造者</p><pre><code>public interface Builder {    void buildPartA();    void buildPartB();    Product getResult();}</code></pre><p>具体建造者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteBuilder1</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Product product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">addPart</span><span class="token punctuation">(</span><span class="token string">"Part A1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">addPart</span><span class="token punctuation">(</span><span class="token string">"Part B1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Product <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> product<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteBuilder2</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Product product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">addPart</span><span class="token punctuation">(</span><span class="token string">"Part A2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">addPart</span><span class="token punctuation">(</span><span class="token string">"Part B2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Product <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> product<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>指导者：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Builder builder <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Director</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Product <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">buildPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Builder builder1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteBuilder1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Director director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>builder1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Product product1 <span class="token operator">=</span> director<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Builder builder2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteBuilder2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>builder2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Product product2 <span class="token operator">=</span> director<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：Product<span class="token operator">:</span>Part A1Part B1Product<span class="token operator">:</span>Part A2Part B2</code></pre><p>建造者模式总结</p><p>该模式的主要优点如下：</p><ul><li><p>各个具体的建造者相互独立，有利于系统的扩展；</p></li><li><p>客户端不必知道产品内部组成的细节，便于控制细节风险；</p></li></ul><p>其缺点如下：</p><ul><li><p>产品的组成部分必须相同，这限制了其使用范围；</p></li><li><p>如果产品的内部变化复杂，该模式会增加很多的建造者类；</p></li></ul><p>适用性：</p><ul><li>建造者模式可以说是对流程的抽象，当创建复杂对象的算法应该独立于该对象的组成部分以及他们的组装方式时；</li><li>当构造过程必须允许被构造的对象有不同的表示时；</li></ul><p>建造者（Builder）模式和工厂模式的关注点不同：建造者模式注重零部件的组装过程，而工厂方法模式更注重零部件的创建过程，但两者可以结合使用。</p><h4 id="5-原型模式"><a href="#5-原型模式" class="headerlink" title="5.原型模式"></a>5.原型模式</h4><p>原型模式的定义：用原型示例指定创建对象的种类，并且通过拷贝这些原型创建新对象。</p><p>所谓原型模式，其实就是依托一个已经实例化的对象去创建另外一个可以进行定制的对象，而不需要知道创建过程中的具体细节。</p><p>原型模式包含以下主要角色。</p><ul><li><p>抽象原型类：规定了具体原型对象必须实现的接口；</p></li><li><p>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象；</p></li><li><p>访问类：使用具体原型类中的 clone() 方法来复制新的对象；</p></li></ul><p>结构图</p><p><img src="/2019/03/02/DesignPattern/PrototypePattern.png" alt></p><p>示例</p><p>在Java中，复制对象是通过clone()方法实现的，Java的clone()方法是浅拷贝。创建原型类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RobotPrototype</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span>Serializable<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> rid<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//机器人序列号，每个机器人序列号均不相同</span>    <span class="token keyword">private</span> CPU cpu<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用的CPU，每个机器人的CPU均不相同</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生产日期</span>    <span class="token keyword">private</span> String factory<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生产工厂</span>    <span class="token keyword">public</span> <span class="token function">RobotPrototype</span><span class="token punctuation">(</span><span class="token keyword">long</span> rid<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String factory<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rid <span class="token operator">=</span> rid<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>        cpu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getRid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRid</span><span class="token punctuation">(</span><span class="token keyword">long</span> rid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rid <span class="token operator">=</span> rid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCpu</span><span class="token punctuation">(</span><span class="token keyword">long</span> cpu_no<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu<span class="token punctuation">.</span><span class="token function">setCpu_no</span><span class="token punctuation">(</span>cpu_no<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>String birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFactory</span><span class="token punctuation">(</span>String factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 浅拷贝     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 深拷贝     * @return     */</span>    <span class="token keyword">protected</span> Object <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ByteArrayOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ByteArrayInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            RobotPrototype robot <span class="token operator">=</span> <span class="token punctuation">(</span>RobotPrototype<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            robot<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            robot<span class="token punctuation">.</span><span class="token function">setRid</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> robot<span class="token punctuation">.</span>cpu<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> robot<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"机器人序列号："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rid <span class="token operator">+</span> <span class="token string">"\n\t"</span> <span class="token operator">+</span>                <span class="token string">"生产日期："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birthday  <span class="token operator">+</span> <span class="token string">"\n\t"</span> <span class="token operator">+</span>                <span class="token string">"生产工程："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">+</span> <span class="token string">"\n\t"</span> <span class="token operator">+</span>                <span class="token string">"使用的CPU信息："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cpu<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n\t"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过对象的序列化和反序列化来实现深拷贝。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CPU</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> cpu_no<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cpu序列号，每个CPU序列号均不相同</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getCpu_no</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cpu_no<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCpu_no</span><span class="token punctuation">(</span><span class="token keyword">long</span> cpu_no<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu_no <span class="token operator">=</span> cpu_no <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"cpu_no: "</span> <span class="token operator">+</span> cpu_no <span class="token operator">+</span> <span class="token string">", hashCode:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RobotPrototype protype_robot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RobotPrototype</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"2018-4-26"</span><span class="token punctuation">,</span> <span class="token string">"富士康机器人生产工厂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        protype_robot<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原型机 ["</span> <span class="token operator">+</span> protype_robot<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            RobotPrototype robot <span class="token operator">=</span> <span class="token punctuation">(</span>RobotPrototype<span class="token punctuation">)</span> protype_robot<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"robot"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" ["</span> <span class="token operator">+</span> robot<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：原型机 <span class="token punctuation">[</span>机器人序列号：<span class="token number">1551522612533</span>    生产日期：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">26</span>    生产工程：富士康机器人生产工厂    使用的CPU信息：cpu_no<span class="token operator">:</span> <span class="token number">199939540956962</span><span class="token punctuation">,</span> hashCode<span class="token operator">:</span><span class="token number">1826771953</span>    <span class="token punctuation">]</span>robot0 <span class="token punctuation">[</span>机器人序列号：<span class="token number">1552334878300</span>    生产日期：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">26</span>    生产工程：富士康机器人生产工厂    使用的CPU信息：cpu_no<span class="token operator">:</span> <span class="token number">199939636725580</span><span class="token punctuation">,</span> hashCode<span class="token operator">:</span><span class="token number">812265671</span>    <span class="token punctuation">]</span>robot1 <span class="token punctuation">[</span>机器人序列号：<span class="token number">1551715676989</span>    生产日期：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">26</span>    生产工程：富士康机器人生产工厂    使用的CPU信息：cpu_no<span class="token operator">:</span> <span class="token number">199939637142517</span><span class="token punctuation">,</span> hashCode<span class="token operator">:</span><span class="token number">193064360</span>    <span class="token punctuation">]</span>robot2 <span class="token punctuation">[</span>机器人序列号：<span class="token number">1551632574171</span>    生产日期：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">26</span>    生产工程：富士康机器人生产工厂    使用的CPU信息：cpu_no<span class="token operator">:</span> <span class="token number">199939637444134</span><span class="token punctuation">,</span> hashCode<span class="token operator">:</span><span class="token number">109961541</span>    <span class="token punctuation">]</span>robot3 <span class="token punctuation">[</span>机器人序列号：<span class="token number">1552193313008</span>    生产日期：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">26</span>    生产工程：富士康机器人生产工厂    使用的CPU信息：cpu_no<span class="token operator">:</span> <span class="token number">199939637755232</span><span class="token punctuation">,</span> hashCode<span class="token operator">:</span><span class="token number">670700378</span>    <span class="token punctuation">]</span>robot4 <span class="token punctuation">[</span>机器人序列号：<span class="token number">1552713267456</span>    生产日期：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">26</span>    生产工程：富士康机器人生产工厂    使用的CPU信息：cpu_no<span class="token operator">:</span> <span class="token number">199939638066609</span><span class="token punctuation">,</span> hashCode<span class="token operator">:</span><span class="token number">1190654826</span>    <span class="token punctuation">]</span>robot5 <span class="token punctuation">[</span>机器人序列号：<span class="token number">1552631984200</span>    生产日期：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">26</span>    生产工程：富士康机器人生产工厂    使用的CPU信息：cpu_no<span class="token operator">:</span> <span class="token number">199939638432856</span><span class="token punctuation">,</span> hashCode<span class="token operator">:</span><span class="token number">1109371569</span>    <span class="token punctuation">]</span>robot6 <span class="token punctuation">[</span>机器人序列号：<span class="token number">1552251503125</span>    生产日期：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">26</span>    生产工程：富士康机器人生产工厂    使用的CPU信息：cpu_no<span class="token operator">:</span> <span class="token number">199939638821939</span><span class="token punctuation">,</span> hashCode<span class="token operator">:</span><span class="token number">728890494</span>    <span class="token punctuation">]</span>robot7 <span class="token punctuation">[</span>机器人序列号：<span class="token number">1553081212960</span>    生产日期：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">26</span>    生产工程：富士康机器人生产工厂    使用的CPU信息：cpu_no<span class="token operator">:</span> <span class="token number">199939639177528</span><span class="token punctuation">,</span> hashCode<span class="token operator">:</span><span class="token number">1558600329</span>    <span class="token punctuation">]</span>robot8 <span class="token punctuation">[</span>机器人序列号：<span class="token number">1552159331444</span>    生产日期：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">26</span>    生产工程：富士康机器人生产工厂    使用的CPU信息：cpu_no<span class="token operator">:</span> <span class="token number">199939639639177</span><span class="token punctuation">,</span> hashCode<span class="token operator">:</span><span class="token number">636718812</span>    <span class="token punctuation">]</span>robot9 <span class="token punctuation">[</span>机器人序列号：<span class="token number">1551967664265</span>    生产日期：<span class="token number">2018</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">26</span>    生产工程：富士康机器人生产工厂    使用的CPU信息：cpu_no<span class="token operator">:</span> <span class="token number">199939640067454</span><span class="token punctuation">,</span> hashCode<span class="token operator">:</span><span class="token number">445051633</span>    <span class="token punctuation">]</span></code></pre><p>原型模式总结</p><p>原型模式适用于以下几种情景：</p><ul><li><p>当要实例化的类是在运行时刻指定时；</p></li><li><p>为了避免创建一个与产品类层次平行的工厂类层次时；</p></li><li><p>当一个类的实例只能有几个不同状态组合中的一种时；</p></li></ul><h3 id="二、创建型模式"><a href="#二、创建型模式" class="headerlink" title="二、创建型模式"></a>二、创建型模式</h3><h4 id="1-桥接模式"><a href="#1-桥接模式" class="headerlink" title="1.桥接模式"></a>1.桥接模式</h4><p>桥接模式的定义：将抽象部分与它的的实现部分分离，使它们都可以独立地变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</p><p>桥接（Bridge）模式包含以下主要角色：</p><ol><li><strong>抽象化（Abstraction）</strong>角色：定义抽象类，并包含一个对实现化对象的引用。</li><li><strong>扩展抽象化（Refined Abstraction）</strong>角色：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li><li><strong>实现化（Implementor）角色</strong>：定义实现化角色的接口，供扩展抽象化角色调用。</li><li><strong>具体实现化（Concrete Implementor）</strong>角色：给出实现化角色接口的具体实现。</li></ol><p>结构图</p><p><img src="/2019/03/02/DesignPattern/BridgePattern.png" alt></p><p>示例</p><p>实现化角色</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//Implementor</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DrawingAPI</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">double</span> y<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>抽象化角色</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Abstraction</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> DrawingAPI drawingAPI<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token function">Shape</span><span class="token punctuation">(</span><span class="token keyword">final</span> DrawingAPI drawingAPI<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>drawingAPI <span class="token operator">=</span> drawingAPI<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//low level</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">resizeByPercentage</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">double</span> pct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//height level</span><span class="token punctuation">}</span></code></pre><p>扩展抽象化</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//RefinedAbstraction</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleShape</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CircleShape</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">double</span> y<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">double</span> radius<span class="token punctuation">,</span> <span class="token keyword">final</span> DrawingAPI drawingAPI<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>drawingAPI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// low-level Implementation specific</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        drawingAPI<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// high-level Abstraction specific</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resizeByPercentage</span><span class="token punctuation">(</span><span class="token keyword">double</span> pct<span class="token punctuation">)</span> <span class="token punctuation">{</span>        radius <span class="token operator">*=</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> pct<span class="token operator">/</span><span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>具体实现化角色1</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//ConcreteImplementor 1</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawingAPI1</span> <span class="token keyword">implements</span> <span class="token class-name">DrawingAPI</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">,</span> <span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"API1.circle at %f:%f radius %f\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>具体实现化角色2</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//ConcreteImplementor 2</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawingAPI2</span> <span class="token keyword">implements</span> <span class="token class-name">DrawingAPI</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">,</span> <span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"API2.circle at %f:%f radius %f\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>客户端</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Shape<span class="token punctuation">[</span><span class="token punctuation">]</span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shape</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>          <span class="token keyword">new</span> <span class="token class-name">CircleShape</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">2.0</span><span class="token punctuation">,</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DrawingAPI1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">CircleShape</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">,</span><span class="token number">7.0</span><span class="token punctuation">,</span><span class="token number">11.0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DrawingAPI2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Shape shape <span class="token operator">:</span> shapes<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//shape.draw();</span>            shape<span class="token punctuation">.</span><span class="token function">resizeByPercentage</span><span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            shape<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：API1<span class="token punctuation">.</span>circle at <span class="token number">1.000000</span><span class="token operator">:</span><span class="token number">2.000000</span> radius <span class="token number">3.075000</span>API2<span class="token punctuation">.</span>circle at <span class="token number">5.000000</span><span class="token operator">:</span><span class="token number">7.000000</span> radius <span class="token number">11.275000</span></code></pre><p>示例2</p><p>数学课程（实现化角色）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数学课程，Implementor */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>高等数学（具体实现化角色）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 高等数学类，ConcreteImplementor */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdvanceMath</span> <span class="token keyword">extends</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选择了高等数学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>数学分析（具体实现化角色）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数学分析类，ConcreteImplementor */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathAnalysis</span> <span class="token keyword">extends</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选择了数学分析"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>学院（抽象化角色）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 院系类，Abstraction */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 院系包含的课程</span>    <span class="token keyword">protected</span> Math mathCourse<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCourse</span><span class="token punctuation">(</span>Math math<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mathCourse <span class="token operator">=</span> math<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//选择课程</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>计算机学院（扩展抽象化角色）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 计算机学院，RefinedAbstraction */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerDpt</span> <span class="token keyword">extends</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算机学院的同学开始选课了："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mathCourse<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>数学院（扩展抽象化角色）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数学院，RefinedAbstraction */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathematicsDpt</span> <span class="token keyword">extends</span> <span class="token class-name">Department</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数学院的同学开始选课了："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mathCourse<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Department dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputerDpt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">.</span><span class="token function">setCourse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AdvanceMath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MathematicsDpt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">.</span><span class="token function">setCourse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MathAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：计算机学院的同学开始选课了：选择了高等数学数学院的同学开始选课了：选择了数学分析</code></pre><p>桥接模式总结</p><p>桥接（Bridge）模式的优点是：</p><ul><li>由于抽象与实现分离，所以扩展能力强；</li><li>其实现细节对客户透明。</li></ul><p>缺点是：由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，这增加了系统的理解与设计难度。</p><p>桥接模式通常适用于以下场景：</p><ol><li>当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时；</li><li>当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时；</li><li>当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。</li></ol><h4 id="2-适配器模式"><a href="#2-适配器模式" class="headerlink" title="2.适配器模式"></a>2.适配器模式</h4><p>适配器模式（AdapterPattern），也称为包装器模式。在实际的软件开发项目中，经常会遇到以前编写的模块的接口跟当前设计的模块接口不吻合以至于无法复用情况，这种情况在项目中就需要使用适配器模式。</p><p>适配器模式定义：将一个类的接口转换成客户所希望的另外一个接口。适配器模式使原本由于接口不兼容而不能再一起工作的那些类可以在一起工作。</p><p>适配器模式有两种类型：<strong>类适配器模式</strong>和<strong>对象适配器模式</strong>，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。类适配器模式可采用多重继承方式实现，如 <a href="http://c.biancheng.net/cplus/" target="_blank" rel="noopener">C++</a> 可定义一个适配器类来同时继承当前系统的业务接口和现有组件库中已经存在的组件接口；<a href="http://c.biancheng.net/java/" target="_blank" rel="noopener">Java</a> 不支持多继承，但可以定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。</p><p>适配器模式（Adapter）包含以下主要角色：</p><ol><li><strong>目标（Target）接口</strong>：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li><strong>适配者（Adaptee）类</strong>：它是被访问和适配的现存组件库中的组件接口。</li><li><strong>适配器（Adapter）类</strong>：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li></ol><p>结构图</p><p><img src="/2019/03/02/DesignPattern/AdapterPattern.png" alt></p><p>对象适配器示例</p><p>目标接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//原有方法</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>适配者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户发起的特殊请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>适配器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//包含一个私有的Adaptee对象</span>    <span class="token keyword">private</span> Adaptee adaptee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adaptee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//覆盖原有的request方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户发起的普通请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//客户基本请求</span>        Target target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------开始适配------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户的特殊请求，需要调用Adapter的方法</span>        target<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>开始适配<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>客户发起的普通请求客户发起的特殊请求</code></pre><p>类适配器示例</p><p>目标接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//客户端期待得到的接口</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>适配者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户发起的特殊请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>适配器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">Adaptee</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 目标接口要求调用request()这个方法名，但源类Adaptee没有方法request()     * 因此适配器补充上这个方法名     * 但实际上request()只是调用源类Adaptee的specificRequest()方法的内容     * 所以适配器只是将specificRequest()方法作了一层封装，封装成Target可以调用的request()而已     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户发起的普通请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Target mAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mAdapter<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：客户发起的普通请求客户发起的特殊请求</code></pre><p>适配器模式总结</p><p>对象适配器和类适配器的区别：</p><ul><li><p>对象适配器是通过对象组合的方式来实现的；</p></li><li><p>类适配器使通过类继承的方式来实现的；</p></li></ul><p>该模式的主要优点如下：</p><ul><li>客户端通过适配器可以透明地调用目标接口；</li><li>复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类；</li><li>将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题；</li></ul><p>其缺点是：对类适配器来说，更换适配器的实现过程比较复杂。</p><p>适配器模式（Adapter）通常适用于以下场景：</p><ul><li>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致；</li><li>使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同；</li></ul><h4 id="3-装饰器模式"><a href="#3-装饰器模式" class="headerlink" title="3.装饰器模式"></a>3.装饰器模式</h4><p>当对一个类的功能进行扩展时，程序员往往会往类里面增加新的方法。但是，有时程序在运行中就需要生成一个具有新的行为的对象，当所增加的行为相当于整个类来说比较微小时，最好可以做到在不改变原有类文件和使用继承的情况下，动态扩展某个对象的功能。此时，就需要使用装饰器模式。</p><p>装饰器模式（Decorator) 定义：动态地给一个对象添加一些额外的职责，就新增加的功能来说，装饰器模式比生成子类更为灵活。</p><p>装饰模式主要包含以下角色：</p><ol><li><strong>抽象构件（Component）</strong>角色：定义一个抽象接口以规范准备接收附加责任的对象。</li><li><strong>具体构件（ConcreteComponent）</strong>角色：实现抽象构件，通过装饰角色为其添加一些职责。</li><li><strong>抽象装饰（Decorator）</strong>角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li><li><strong>具体装饰（ConcreteDecorator）</strong>角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li></ol><p>结构图</p><p><img src="/2019/03/02/DesignPattern/DecoratorPattern.png" alt></p><p>示例</p><p>抽象组件角色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 基本操作</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>具体组件角色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 基本操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"基本操作"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>抽象装饰器角色</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Component component<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setComponent</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基本操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>            component<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>具体装饰器角色A</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorA</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String addedState<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        addedState <span class="token operator">=</span> <span class="token string">"新增状态"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这个类具有一个状态："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addedState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>具体装饰器角色B</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorB</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在这个对象有一个新方法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Component component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实例化两个装饰器</span>        ConcreteDecorator decoratorA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ConcreteDecorator decoratorB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对component进行装饰</span>        decoratorA<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"经过装饰器A装饰后的操作："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        decoratorA<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对component进行装饰</span>        decoratorB<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"经过装饰器B装饰后的操作："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        decoratorB<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：经过装饰器A装饰后的操作：基本操作这个类具有一个状态：新增状态经过装饰器B装饰后的操作：基本操作现在这个对象有一个新方法！</code></pre><p>例如Java中的FilterInputStream也是使用的装饰器模式：</p><p><img src="/2019/03/02/DesignPattern/InputStream.png" alt></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DecoratorDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> FileNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//FileInputStream被装饰者</span>        InputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//装饰者</span>        <span class="token comment" spellcheck="true">//DataInputStream &lt;- FilterInputStream &lt;- InputStream</span>        FilterInputStream filterInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>装饰器模式总结</p><p>装饰（Decorator）模式的主要优点有：</p><ul><li>采用装饰模式扩展对象的功能比采用继承方式更加灵活。</li><li>可以设计出多个不同的具体装饰类，创造出多个不同行为的组合。</li></ul><p>其主要缺点是：装饰模式增加了许多子类，如果过度使用会使程序变得很复杂。</p><p>装饰器模式主要适用于以下几种情况：</p><ul><li><p>当需要以不影响其他对象为前提实现动态、透明地给单个对象添加职责时；</p></li><li><p>当需要将对象的某些职责进行撤销操作时；</p></li><li><p>当不能使用生成子类的方法进行当前系统的扩充时；</p></li></ul><h2 id="TO-BE-CONTINUE"><a href="#TO-BE-CONTINUE" class="headerlink" title="TO BE CONTINUE!"></a>TO BE CONTINUE!</h2>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将一个单链表逆置？</title>
      <link href="/2019/02/28/ListReverseDemo/"/>
      <url>/2019/02/28/ListReverseDemo/</url>
      
        <content type="html"><![CDATA[<h2 id="如何将一个单链表逆置？"><a href="#如何将一个单链表逆置？" class="headerlink" title="如何将一个单链表逆置？"></a>如何将一个单链表逆置？</h2><p><img src="/2019/02/28/ListReverseDemo/image-20190302002632947.png" alt></p><p>链表的节点</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h4 id="普通解法"><a href="#普通解法" class="headerlink" title="普通解法"></a>普通解法</h4><p>链表的逆置最容易想到是利用一个栈的结构，该算法的时间复杂度为o(n)，空间复杂度同样为o(n)。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ListNode <span class="token function">reverseListByStack</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListNode newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode p <span class="token operator">=</span> newHead<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取出栈中的元素，构造新链表</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ListNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        p <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode node4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node2<span class="token punctuation">;</span>    node2<span class="token punctuation">.</span>next <span class="token operator">=</span> node3<span class="token punctuation">;</span>    node3<span class="token punctuation">.</span>next <span class="token operator">=</span> node4<span class="token punctuation">;</span>    node1 <span class="token operator">=</span> <span class="token function">reverseListByStack</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>node1 <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        node1 <span class="token operator">=</span> node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="高级解法"><a href="#高级解法" class="headerlink" title="高级解法"></a>高级解法</h4><p>只额外使用了两个只针，这种解法的空间复杂度能达到o(1)，时间复杂度同样为o(n)。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode pre <span class="token operator">=</span> null<span class="token punctuation">;</span>    ListNode next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode node4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node1<span class="token punctuation">.</span>next <span class="token operator">=</span> node2<span class="token punctuation">;</span>    node2<span class="token punctuation">.</span>next <span class="token operator">=</span> node3<span class="token punctuation">;</span>    node3<span class="token punctuation">.</span>next <span class="token operator">=</span> node4<span class="token punctuation">;</span>    node1 <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>node1 <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        node1 <span class="token operator">=</span> node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>具体步骤，如下图：</p><p><img src="/2019/02/28/ListReverseDemo/image-20190302003014433.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/28/hello-world/"/>
      <url>/2019/02/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
